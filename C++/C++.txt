o = 1+p => 1.operator+(p)??? NON!
operator+(1,p) -> Fonction amie. 

IV) Opérateurs spéciaux du c++: 

-> cout/ cin : 

int n = 15; 
cout << n; <-- cout.operatior<<(n);

x o;
cout <<o;     <-- cout.operator<<(o); NON!
		operator<<(cout,o);
--------------------------------------

ostream & operator<<(ostream & o, const Date & d)
return o<<dt.d<<"/"<<dt.m<<"/"<<dt.y

istream &operator >>(istream &i, Date & dt){
	i >>dt.d;
	i >>dt.m;
	i >>dt.y;
	return i;
}

class Date{
	int d, m, y; 
	friend ostream &operator<<(ostream & const Date &);
	friend istream & operator >> istream &, Date &);
}

* conversion:

ex:     Date d; 
	int n = 15;
n = d    =>  n=(int)d       |     d = n  => d = 15 => d.operator=(n)         => d = n => d = Date(n)
=> class Date{
	operator int(){
	return m; 
} 
}

HERITAGE: 

I) Mise en place: 

Construction: 

class X{
};

class Y: public X{
// nouveautee
};


Ex:

class Conposent{
private: 
	int x; 
	int y; 
public: 
	// methodes classiques

}

class TextEdit: public Composent{
private: 
	string text; 
public: 
	string getText(); 	

}

Fabrication objet: 
TextEdit edit; => valeur
TextEdit *pEdit; => pointeur
TextEdit &rEdit; => référence

edit.getText(); 
edit.setX(10);

°Propriétés: 

- Pouvoir affecter une dérivée à une base: BASE <- DERIVEE

Component <- TextEdit => Fabrication de variable en valeur
x		x
_		_
y		y
_		_
?	<-     Text  => ERROR!


Component* <- TextEdit* => Sans pointeur, pas de polymorphisme. 
Component& <- TextEdit&


EXEMPLE avec operateur ==: 

class Conposent{
private:
        int x;
        int y;
public:
        bool operator==(const Component&c){
	return x==c.x && y==c.y;
	}

}

class TextEdit: public Composent{
private:
        string text;
public:
        string getText();

}

----------------------------
class Conposent{
private:
        int x;
        int y;
public:
	void print();       
 }

}

class TextEdit: public Composent{
private:
        string text;
public:
	void print(){
	Componnent::print();
	cout<<text;
	}
}
-----------------------
class Conposent{
private:
        int x;
        int y;
public:
	Component();
	Component(int, int); 
	Component(const Component&);
 }

}

class TextEdit: public Composent{
private:
        string text;
public:
	TextEdit(string, int, int)	
}




-> C'est dans l'entête:

TextEdit::TextEdit(string text, int y, int y):Component(x,y){
	
}

TextEdit::TextEdit(const TextEdit &edit):Component(edit){
	this->text = edit.text
}


II) Polymorphisme(* / &)

Component * pcomp;

pcomp = new TexEdit();

pcomp->print() <= celle de la class component

delete pcomp;
